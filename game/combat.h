#pragma once

#include "config.h"
#include "entity_types.h"
#include "game_types.h"
#include "cmds.h"
#include "lib/types/enum.h"
#include "lib/math/vector.h"
#ifdef SINGLE_PLAYER
#include "monster.h"
#endif

/*
============
CanDamage

Returns true if the inflictor can directly damage the target.  Used for
explosions and melee attacks.
============
*/
bool CanDamage(entity &targ, entity &inflictor);

// damage flags
enum damage_flags : uint16_t
{
	DAMAGE_NONE,
	DAMAGE_RADIUS = 1 << 0,			// damage was indirect
	DAMAGE_NO_ARMOR = 1 << 1,		// armor does not protect from this damage
	DAMAGE_ENERGY = 1 << 2,			// damage is from an energy based weapon
	DAMAGE_NO_KNOCKBACK = 1 << 3,	// do not affect velocity, just view angles
	DAMAGE_NO_PROTECTION = 1 << 4,	// armor, shields, invulnerability, and godmode have no effect
	DAMAGE_IGNORE_FF = 1 << 5,	    // damage ignores friendly fire status
	DAMAGE_INSTANT_GIB = 1 << 6,    // if damage takes us <= 0 health, set directly to gib_health - 1
	DAMAGE_NO_RADIUS_HALF = 1 << 7, // no damage halving for self-radius damage

#ifdef GROUND_ZERO
	DAMAGE_DESTROY_ARMOR = 1 << 8,	// damage is done to armor and health.
	DAMAGE_NO_REG_ARMOR = 1 << 9,	// damage skips regular armor
	DAMAGE_NO_POWER_ARMOR = 1 << 10,// damage skips power armor
#endif
};

MAKE_ENUM_BITWISE(damage_flags);

// stores the style of damage to be done; this includes
// flags that affect the outcome of the damage, and
// how to handle visual effects generated by this damage.
struct damage_style
{
	damage_flags	flags = DAMAGE_NONE;
	temp_event		blood = TE_BLOOD;
	temp_event		sparks = TE_SPARKS;
};

// the default means of death that is used when none is specified.
constexpr means_of_death MOD_DEFAULT { .self_kill_fmt = "{0} killed {2}.\n", .other_kill_fmt = "{0} was killed by {3}.\n" };

// these are generic death messages that are used in various places
// and don't really belong to any particular module.
constexpr means_of_death MOD_CRUSH { .self_kill_fmt = "{0} was squished.\n" };
constexpr means_of_death MOD_WATER { .self_kill_fmt = "{0} sank like a rock.\n" };
constexpr means_of_death MOD_SLIME { .self_kill_fmt = "{0} melted.\n" };
constexpr means_of_death MOD_LAVA { .self_kill_fmt = "{0} does a back flip into the lava.\n" };
constexpr means_of_death MOD_EXPLOSIVE { .self_kill_fmt = "{0} blew up.\n", .other_kill_fmt = "{0} was blown up by {3}.\n" };

/*
============
T_Damage

targ        entity that is being damaged
inflictor   entity that is causing the damage
attacker    entity that caused the inflictor to damage targ
	example: targ=monster, inflictor=rocket, attacker=player

dir         direction of the attack
point       point at which the damage is being inflicted
normal      normal vector from that point
damage      amount of damage being inflicted
knockback   force to be applied against targ as a result of the damage

dflags      these flags are used to control how T_Damage works
mod         the means of death to be displayed on death
============
*/
void T_Damage(entity &targ, entity &inflictor, entity &attacker, vector dir, vector point, vector normal, int32_t damage, int32_t knockback, damage_style style = { }, means_of_death_ref mod = MOD_DEFAULT);

/*
============
T_RadiusDamage
============
*/
void T_RadiusDamage(entity &inflictor, entity &attacker, float damage, entityref ignore, float radius, means_of_death_ref mod = MOD_DEFAULT, damage_style style = { DAMAGE_RADIUS });